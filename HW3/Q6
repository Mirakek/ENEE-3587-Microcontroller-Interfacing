#include <avr/io.h>
#include <util/delay.h>
#define F_CPU 16000000UL 

int main(void) {

    uint32_t frequency = 1;
    DDRB |= 0x02; // // PTB2 is for OC1B output
    TCCR1A = 0x23; // Fast PWM, clear OC1B compare match, OCR1A as TOP (0b00100011)
    TCCR1B = 0x19; // Fast PWM mode, initialized with no prescaler (0b00011001)

    while (1) {
        if(frequency <= 31) {
            TCCR1B = (TCCR1B & 0xF8) | 0x05; // Prescaler is 1024 
            OCR1A = F_CPU / (1024 * frequency) - 1;} 
        else if(frequency <= 250) {
            TCCR1B = (TCCR1B & 0xF8) | 0x04; // Prescaler is 256
            OCR1A = F_CPU / (256 * frequency) - 1;} 
        else if(frequency <= 2000) {
            TCCR1B = (TCCR1B & 0xF8) | 0x03; // Prescaler is 64
            OCR1A = F_CPU / (64 * frequency) - 1;} 
        else if(frequency <= 16000) {
            TCCR1B = (TCCR1B & 0xF8) | 0x02; // Prescaler is 8
            OCR1A = F_CPU / (8 * frequency) - 1;} 
        else {
            TCCR1B = (TCCR1B & 0xF8) | 0x01; // Prescaler is 1
            OCR1A = F_CPU / frequency - 1;}

        OCR1B = OCR1A * 0.5; // Duty cycle = 50%
        _delay_ms(1000);

        if(frequency < 100000) { 
            frequency++;  // Increment frequency until 100kHz
        }
    }
}


